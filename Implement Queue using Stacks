class Queue {
	private Stack instack;
	private Stack outstack;
	private int size;
	private int capacity;
	private int backElement;
	
	Queue (int capacity) {
		this.capacity = capacity;
		this.instack = new Stack(capacity);
		this.outstack = new Stack(capacity);
		this.size = 0;
		this.backElement = -1;

	}

	boolean isEmpty() {
		return size == 0;
	}
	
	int size() {
		return size;

	}
	
	int front() {
		if(isEmpty()) return -1;
		if(outstack.isEmpty()){
			transferInToOut();
		}
		return outstack.top();

	}
	
	int back() {
		if(isEmpty()) return -1;
		return backElement;

	}
	
	void push(int element) {
		if(size == capacity){
			System.out.println("queue is full");
			return;
		}
		instack.push(element);
		backElement = element;
		size++;

	}
	
	void pop() {
		if(isEmpty()){
			System.out.println("queue is empty");
			return;
		}
		if(outstack.isEmpty()) {
			transferInToOut();
		}
		outstack.pop();
		size--;
		if(isEmpty()){
			backElement = -1;
		}

	}
	private void transferInToOut(){
		while(!instack.isEmpty()){
			outstack.push(instack.top());
			instack.pop();
		}
		
	}
}
